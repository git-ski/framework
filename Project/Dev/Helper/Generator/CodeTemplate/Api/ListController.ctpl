<?php
/**
 * PHP version 7
 * File {{controller}}.php
 *
 * @category Controller
 * @package  {{module|ucfirst}}\{{type|ucfirst}}
 * @author  gpgkd906@gmail.com
 * @license  http://www.opensource.org/licenses/mit-license.php MIT
 * @link     https://github.com/git-ski/framework
 */
declare(strict_types=1);

namespace {{module|ucfirst}}\{{type|ucfirst}}\Controller;

{% if authType == 'admin' %}
use Project\Base\Api\Controller\AbstractAdminRestfulController as AbstractRestfulController;
{% else %}
use Project\Base\Api\Controller\AbstractRestfulController;
{% if authType == 'front' %}
use Project\Base\Front\Controller\AuthControllerInterface;
{% endif %}
{% endif %}
use {{module|ucfirst}}\{{crud_type|ucfirst}}\View\ViewModel\{{namespace|ucfirst}}\ListViewModel;
use {{module|ucfirst}}\{{crud_type|ucfirst}}\Controller\{{namespace|ucfirst}}\ListModel as {{EntityClass}}ListModel;
use Project\Viewpack\Common\Layout\EmptyLayout;
use Std\SessionManager\SessionManagerAwareInterface;

{% if authType == 'front' %}
class {{controller}} extends AbstractRestfulController implements
    AuthControllerInterface,
    SessionManagerAwareInterface
{% else %}
class {{controller}} extends AbstractRestfulController implements
    SessionManagerAwareInterface
{% endif %}
{
    use \Std\SessionManager\SessionManagerAwareTrait;

    /**
     * 参照(一件)
     *
     * @param integer $id 参照対象id
     * @return array レスポンス
     */
    public function get($id)
    {
        ${{model|ucfirst}} = $this->getObjectManager()->get({{model}}::class);
        ${{EntityClass}} = ${{model|ucfirst}}->get($id);
        if (!${{EntityClass}}) {
            return $this->notFount();
        }
        $data = ${{EntityClass}}->toArray();
        // データをフォーマット

        return [
            'success' => true,
            'data' => $data
        ];
    }

    /**
     * 参照(複数)
     *
     * @param array $data 検索条件
     * @return array レスポンス
     */
    public function getList()
    {
        $page = $this->getHttpMessageManager()->getRequest()->getQueryParams()['page'] ?? 1;
        $condition = $this->getHttpMessageManager()->getRequest()->getQueryParams()['condition'] ?? [];
        $orderBy = $this->getHttpMessageManager()->getRequest()->getQueryParams()['sort'] ?? [];

        ${{EntityClass}}ListModel = $this->getObjectManager()->get({{EntityClass}}ListModel::class);

        $sessionManager = $this->getSessionManager();
        $sessionContainer = $sessionManager->getSession(__CLASS__);

        $paginator = ${{EntityClass}}ListModel->search($condition, $orderBy);
        $paginator->setCurrentPageNumber($page);

        $ViewModel = $this->getViewModelManager()->getViewModel([
            'viewModel' => ListViewModel::class,
            'data'      => [
                '{{entity|lcfirst}}' => $paginator,
                'orderBy'  => $orderBy
            ],
        ]);


        $formData = $ViewModel->getForm()->getData();
        $formData['{{entity|lcfirst}}'] = $condition;
        $ViewModel->getForm()->setData($formData);

        $sessionContainer->condition = $condition;
        $sessionContainer->page = $page;
        $sessionContainer->orderBy = $orderBy;

        $ViewModel->setLayout(new EmptyLayout());

        return [
            'success' => true,
            'data' => [
                'content' => $ViewModel->Render()
            ]
        ];
    }
}
