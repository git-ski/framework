<?php
/**
 * PHP version 7
 * File DeleteController.php
 *
 * @category Controller
 * @package  {{module|ucfirst}}\{{type|ucfirst}}
 * @author  gpgkd906@gmail.com
 * @license  http://www.opensource.org/licenses/mit-license.php MIT
 * @link https://github.com/git-ski/module_{{entity|lcfirst}}.git
 */
declare(strict_types=1);

namespace {{module|ucfirst}}\{{type|ucfirst}}\Controller\{{namespace|ucfirst}};

use Doctrine\ORM\Tools\Pagination\Paginator as ORMPaginator;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator as DoctrineAdapter;
use Laminas\Paginator\Paginator;
use {{useEntityModel}};

/**
 * Class DeleteController
 *
 * @category Controller
 * @package  {{module|ucfirst}}\{{type|ucfirst}}
 * @author  gpgkd906@gmail.com
 * @license  http://www.opensource.org/licenses/mit-license.php MIT
 * @link https://github.com/git-ski/module_{{entity|lcfirst}}.git
 */
class ListModel extends {{EntityModel}}
{
    public function search(array $condition = null, array $sort = null, $limit = null, $offset = null) : Iterable
    {
        $orderBy = [];
        if (empty($sort)) {
            $orderBy = [
                '{{entity|lcfirst}}.{{EntityIdLabel}}' => 'DESC',
            ];
        } else {
            foreach ($sort as $key => $val) {
                $key = '{{entity|lcfirst}}.' . $key;
                $orderBy[$key] = $val;
            }
        }

        $QueryBuilder = $this->getRepository()->createQueryBuilder('{{entity|lcfirst}}');
{% if EntityPropertyList.deleteFlag %}
        $QueryBuilder->where('{{entity|lcfirst}}.deleteFlag = 0');
{% endif %}

        $params = [];

{% set keywordCondition = [] %}
{% for cname, property in EntityPropertyList %}
{% if property.exclude != true and name != EntityIdLabel and property.type == "string" %}
{% set keywordCondition = keywordCondition|merge([
    cname
]) %}
{% endif %}
{% endfor %}
{% if keywordCondition|length %}
        if( isset($condition['keyword']) && $condition['keyword'] != '' ){
            $keywords = preg_split("/[\s]+/u", $condition['keyword']);
            $i = 0;
            foreach ($keywords as $keyword) {
                $QueryBuilder->andWhere(
                    $QueryBuilder->expr()->orX(
{% for name in keywordCondition %}
{% if loop.last %}
                        $QueryBuilder->expr()->like('{{entity|lcfirst}}.{{name}}', ':keyword_' . $i)
{% else %}
                        $QueryBuilder->expr()->like('{{entity|lcfirst}}.{{name}}', ':keyword_' . $i),
{% endif %}
{% endfor %}
                    )
                );
                $params["keyword_" . $i] = '%'. $keyword . '%';
                $i++;
            }
        }
{% endif %}

        if (empty($limit)) {
            $applicationConfig = $this->getConfigManager()->getConfig('application');
            $limit = $applicationConfig['items_per_page'];
        }

        $QueryBuilder->setParameters($params);
        $QueryBuilder->setFirstResult($offset)
            ->setMaxResults(PHP_INT_MAX);
        foreach ($orderBy as $column => $direction) {
            $QueryBuilder->addOrderBy($column, $direction);
        }

        $adapter = new DoctrineAdapter(new ORMPaginator($QueryBuilder->getQuery(), false));
        $paginator = new Paginator($adapter);
        $paginator->setItemCountPerPage($limit);

        return $paginator;
    }
}
