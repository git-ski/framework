<?php
declare(strict_types=1);

namespace {{module|ucfirst}}\Model;

use Framework\ObjectManager\ObjectManager;
use Framework\ConfigManager\ConfigManagerAwareInterface;
use Std\EntityManager\EntityManagerAwareInterface;
use Std\CryptManager\CryptManagerAwareInterface;
use Std\EntityManager\AbstractEntityModel;
use Std\EntityManager\EntityInterface;
use {{useEntity}};
{% for name, property in EntityPropertyList %}
{% if property.type == "selectJoin" %}
use {{property.useReferencesEntityModel}};
{% endif %}
{% endfor %}
use InvalidArgumentException;

class {{EntityModel}} extends AbstractEntityModel implements
    EntityManagerAwareInterface,
    ConfigManagerAwareInterface,
    CryptManagerAwareInterface
{
    use \Framework\ConfigManager\ConfigManagerAwareTrait;
    use \Std\EntityManager\EntityManagerAwareTrait;
    use \Std\CryptManager\CryptManagerAwareTrait;

    private $Repository;
{% for name, property in EntityPropertyList %}
{% if property.type == "selectJoin" %}
    private static ${{name}}Objects;
{% endif %}
{% endfor %}

    /**
     * Entityを作成
     *
     * @param array $data
     * @return EntityInterface
     */
    public function create($data) : EntityInterface
    {
        ${{EntityClass}} = new {{EntityClass}}();
        $data = $this->filterValues($data);
{% for name, property in EntityPropertyList %}
{% if property.type == "password" and not property.Identical %}
        $data['{{name|lcfirst}}'] = $this->getCryptManager()->getPasswordCrypt()->create($data['{{name|lcfirst}}']);
{% endif %}
{% endfor %}
{% for name, property in EntityPropertyList %}
{% if property.type == "selectJoin" %}
        if (isset($data['{{name}}'])) {
            ${{property.referencesEntityModel}} = $this->getObjectManager()->get({{property.referencesEntityModel}}::class);
            $data['{{name}}'] = ${{property.referencesEntityModel}}->get($data['{{name}}']);
        }
{% endif %}
{% endfor %}
        ${{EntityClass}}->fromArray($data);
        $DateTime = $this->getDateTimeForEntity();
{% for name, property in EntityPropertyList if property.exclude == true %}
{% if property.column == "create_date" or property.column == "update_date"  %}
        ${{EntityClass}}->set{{name|ucfirst}}($DateTime->format('Y-m-d'));
{% endif %}
{% if property.column == "create_time" or property.column == "update_time"  %}
        ${{EntityClass}}->set{{name|ucfirst}}($DateTime->format('H:i:s'));
{% endif %}
{% if property.column == "create_datetime" or property.column == "update_datetime"  %}
        ${{EntityClass}}->set{{name|ucfirst}}($DateTime->format('Y-m-d H:i:s'));
{% endif %}
{% if property.column == "create_admin_id"  %}
        ${{EntityClass}}->setCreateAdminId($this->getCreateAdminId());
{% endif %}
{% if property.column == "update_admin_id"  %}
        ${{EntityClass}}->setUpdateAdminId($this->getUpdateAdminId());
{% endif %}
{% endfor %}
        $this->getEntityManager()->persist(${{EntityClass}});
        $this->getEntityManager()->flush();
        return ${{EntityClass}};
    }

    /**
     * DoctrineのBulk Insertを使って、大量データのinsertを効率化する
     * http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/batch-processing.html#batch-processing
     *
     * @param Generator $dataGenerator
     * @param integer $batchSize
     * @return {{EntityModel}}
     */
    public function bulkCreate(Generator $dataGenerator, $batchSize = 1000)
    {
        $index = 0;
        foreach ($dataGenerator as $data) {
            ++$index;
            ${{EntityClass}} = new {{EntityClass}}();
            $data = $this->filterValues($data);
{% for name, property in EntityPropertyList %}
{% if property.type == "password" and not property.Identical %}
            $data['{{name|lcfirst}}'] = $this->getCryptManager()->getPasswordCrypt()->create($data['{{name|lcfirst}}']);
{% endif %}
{% endfor %}
{% for name, property in EntityPropertyList %}
{% if property.type == "selectJoin" %}
            if (isset($data['{{name}}'])) {
                ${{property.referencesEntityModel}} = $this->getObjectManager()->get({{property.referencesEntityModel}}::class);
                $data['{{name}}'] = ${{property.referencesEntityModel}}->get($data['{{name}}']);
            }
{% endif %}
{% endfor %}
            ${{EntityClass}}->fromArray($data);
            $DateTime = $this->getDateTimeForEntity();
{% for name, property in EntityPropertyList if property.exclude == true %}
{% if property.column == "create_date" or property.column == "update_date"  %}
            ${{EntityClass}}->set{{name|ucfirst}}($DateTime->format('Y-m-d'));
{% endif %}
{% if property.column == "create_time" or property.column == "update_time"  %}
            ${{EntityClass}}->set{{name|ucfirst}}($DateTime->format('H:i:s'));
{% endif %}
{% if property.column == "create_datetime" or property.column == "update_datetime"  %}
            ${{EntityClass}}->set{{name|ucfirst}}($DateTime->format('Y-m-d H:i:s'));
{% endif %}
{% if property.column == "create_admin_id"  %}
            ${{EntityClass}}->setCreateAdminId($this->getCreateAdminId());
{% endif %}
{% if property.column == "update_admin_id"  %}
            ${{EntityClass}}->setUpdateAdminId($this->getUpdateAdminId());
{% endif %}
{% endfor %}
            if (($index % $batchSize) === 0) {
                $this->getEntityManager()->flush();
                $this->getEntityManager()->clear();
            }
        }
        $this->getEntityManager()->flush();
        $this->getEntityManager()->clear();
        return $this;
    }

    /**
     * Entityを取得
     *
     * @param int $id
     * @return EntityInterface|null
     */
    public function get($idOr{{EntityClass}})
    {
        if ($idOr{{EntityClass}} instanceof {{EntityClass}}) {
            return $idOr{{EntityClass}};
        }

        return $this->getRepository()->findOneBy([
            '{{EntityIdLabel}}' => $idOr{{EntityClass}},
{% if EntityPropertyList.deleteFlag %}
            'deleteFlag' => 0
{% endif %}
        ]);
    }

    /**
     * Entityを検索する
     *
     * @param array|null   $criteria
     * @param array|null   $orderBy
     * @param integer|null $limit
     * @param integer|null $offset
     * @return array
     */
    public function getList(array $criteria = [], array $orderBy = null, $limit = null, $offset = null) : Iterable
    {
{% if EntityPropertyList.deleteFlag %}
        $criteria = array_merge([
            'deleteFlag' => 0
        ], $criteria);
{% endif %}
        if (empty($orderBy)) {
            $orderBy = [
{% if EntityPropertyList.showPriority %}
                'showPriority' => 'DESC',
{% endif %}
                '{{EntityIdLabel}}' => 'ASC',
            ];
        }
        return $this->getRepository()->findBy($criteria, $orderBy, $limit, $offset);
    }

    /**
     * 条件付け、１つのEntityを取得する
     * deleteFlagを考慮する
     *
     * @param array $criteria
     * @param array $orderBy
     * @return EntityInterface
     */
    public function getOneBy(array $criteria, array $orderBy = null)
    {
{% if EntityPropertyList.deleteFlag %}
        $criteria = array_merge([
            'deleteFlag' => 0
        ], $criteria);
{% endif %}
        if (empty($orderBy)) {
            $orderBy = [
{% if EntityPropertyList.showPriority %}
                'showPriority' => 'DESC',
{% endif %}
                '{{EntityIdLabel}}' => 'ASC',
            ];
        }
        return $this->getRepository()->findOneBy($criteria, $orderBy);
    }

    /**
     * Entityを更新する
     *
     * @param integer|EntityInterface $idOrEntity
     * @param array                   $data
     * @return EntityInterface
     * @throws InvalidArgumentException 更新対象が見つからない場合はExceptionを投げる
     */
    public function update($idOr{{EntityClass}}, $data = null) : EntityInterface
    {
        if (!$idOr{{EntityClass}} instanceof EntityInterface) {
            $idOr{{EntityClass}} = $this->get($idOr{{EntityClass}});
        }
        if (!$idOr{{EntityClass}} instanceof EntityInterface) {
            throw new InvalidArgumentException('Invalid Entity OR Id For Update: {{EntityClass}}');
        }
        if ($data) {
            $data = $this->filterValues($data);
{% for name, property in EntityPropertyList %}
{% if property.type == "password" and not property.Identical %}
            if (isset($data['{{name|lcfirst}}'])) {
                $data['{{name|lcfirst}}'] = $this->getCryptManager()->getPasswordCrypt()->create($data['{{name|lcfirst}}']);
            }
{% endif %}
{% endfor %}
{% for name, property in EntityPropertyList %}
{% if property.type == "selectJoin" %}
            if (isset($data['{{name}}'])) {
                ${{property.referencesEntityModel}} = $this->getObjectManager()->get({{property.referencesEntityModel}}::class);
                $data['{{name}}'] = ${{property.referencesEntityModel}}->get($data['{{name}}']);
            }
{% endif %}
{% endfor %}
            $idOr{{EntityClass}}->fromArray($data);
        }
        $DateTime = $this->getDateTimeForEntity();
{% for name, property in EntityPropertyList if property.exclude == true %}
{% if property.column == "update_date"  %}
        $idOr{{EntityClass}}->set{{name|ucfirst}}($DateTime->format('Y-m-d'));
{% endif %}
{% if property.column == "update_time" %}
        $idOr{{EntityClass}}->set{{name|ucfirst}}($DateTime->format('H:i:s'));
{% endif %}
{% if property.column == "update_datetime"  %}
        $idOr{{EntityClass}}->set{{name|ucfirst}}($DateTime->format('Y-m-d H:i:s'));
{% endif %}
{% if property.column == "update_admin_id"  %}
        $idOr{{EntityClass}}->setUpdateAdminId($this->getUpdateAdminId());
{% endif %}
{% endfor %}
        $this->getEntityManager()->merge($idOr{{EntityClass}});
        $this->getEntityManager()->flush();
        return $idOr{{EntityClass}};
    }

    /**
     * Entityを論理削除
     *
     * @param integer|EntityInterface $idOrEntity
     * @return EntityInterface
     * @throws InvalidArgumentException 更新対象が見つからない場合はExceptionを投げる
     */
    public function delete($idOr{{EntityClass}}) : EntityInterface
    {
{% if not EntityPropertyList.deleteFlag %}
        throw new InvalidArgumentException('{{EntityClass}} にdeleteFlagが存在しないため、論理削除できません。');
{% endif %}
        ${{EntityClass}} = $this->get($idOr{{EntityClass}});
        if (!${{EntityClass}} instanceof EntityInterface) {
            throw new InvalidArgumentException('Invalid Entity OR Id For Delete: {{EntityClass}}');
        }
        ${{EntityClass}}->setDeleteFlag(true);
        $this->getEntityManager()->merge(${{EntityClass}});
        $this->getEntityManager()->flush();
        return ${{EntityClass}};
    }

    /**
     * Entityを物理削除
     *
     * @param [type] $idO
     * @return void
     */
    public function remove($idOr{{EntityClass}})
    {
        ${{EntityClass}} = $this->get($idOr{{EntityClass}});
        if (!${{EntityClass}} instanceof EntityInterface) {
            throw new InvalidArgumentException('Invalid Entity OR Id For Delete: {{EntityClass}}');
        }
        $this->getEntityManager()->remove(${{EntityClass}});
        $this->getEntityManager()->flush();
    }

    public function getRepository()
    {
        if (null === $this->Repository) {
            $this->Repository = $this->getEntityManager()->getRepository({{EntityClass}}::class);
        }
        return $this->Repository;
    }

    /**
     * Entityの属性のvalue_listを返す
     *
     * @return array
     */
    public static function getValueOptions() : array
    {
        return [
{% for name, property in EntityPropertyList %}
{% if property.type == "checkbox" %}
            '{{name}}' => [
                0 => '{{entity|upper}}_{{name|upper}}_OFF',
                1 => '{{entity|upper}}_{{name|upper}}_ON',
            ],
{% endif %}
{% endfor %}
        ];
    }

    /**
     * 属性のラベルを取得
     *
     * @param string $property
     * @return string
     */
    public static function getPropertyLabel($property) : string
    {
        $propertyLabels = [
{% for name, property in EntityPropertyList %}
            '{{name}}' => '{{entity|upper}}_{{name|upper}}',
{% endfor %}
        ];
        $propertyLabel = $propertyLabels[$property] ?? '';
        return parent::getPropertyLabel((string) $propertyLabel);
    }

    /**
     * 文字列でないカラムの保存時に、空白の文字列をセットするとエラーになる
     * そのため、保存前に、空白の文字列をフィルターする
     * 特定のカラムの空値を特別扱うためには、カラムごとの処理を持つ。
     * 注意、数値型などでは、0が入る可能性もあるため、厳密なnullチェックを行うこと
     * 注意２、文字列などのカラムはそもそも空白文字列が入ることも想定するので、逆にフィルターしてはいけない。
     * また、主キーなど、更新対象にならないカラムはunsetしておく
     * 主キーを更新したい場合は明示的にここのフィルターを解除する。
     *
     * @param array $data
     * @return array
     */
    public function filterValues($data) : array
    {
        // 主キーフィルター
        if (isset($data['{{EntityIdLabel}}'])) {
            unset($data['{{EntityIdLabel}}']);
        }
        // 空白文字列フィルター
{% for name, property in EntityPropertyList if property.exclude != true %}
{% if name != EntityIdLabel %}
{% if property.type != "string" and property.virtual != true %}
        if (isset($data['{{name}}']) && '' === $data['{{name}}']) {
            unset($data['{{name}}']);
        }
{% endif %}
{% endif %}
{% endfor %}
        return $data;
    }

{% for name, property in EntityPropertyList %}
{% if property.type == "selectJoin" %}
    public static function get{{name}}Objects($label = null, array $criteria = [], array $orderBy = null, $limit = null, $offset = null)
    {
        if (null === self::${{name}}Objects) {
            self::${{name}}Objects = [];
            ${{property.referencesEntityModel}} = ObjectManager::getSingleton()->get({{property.referencesEntityModel}}::class);
            // 検索条件の拡張や調整はここ

            self::${{name}}Objects = ${{property.referencesEntityModel}}->getList($criteria, $orderBy, $limit, $offset);
        }
        if (null === $label) {
            $label = '';
        }
        $valueOptions = [];
        foreach (self::${{name}}Objects as ${{name}}) {
            $id                = ${{name}}->get{{property.entityIdLabel|ucfirst}}();
            $valueOptions[$id] = ${{name}}->get{{property.entityIdLabel|ucfirst}}();
        }
        return $valueOptions;
    }

    public static function get{{name}}ObjectsHaystack()
    {
        $hayStack = [];
        if (null === self::${{name}}Objects) {
            self::get{{name}}Objects();
        }
        foreach (self::${{name}}Objects as ${{name}}) {
            $hayStack[] = ${{name}}->get{{property.entityIdLabel|ucfirst}}();
        }
        return $hayStack;
    }
{% endif %}
{% endfor %}
}
